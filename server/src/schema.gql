# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BaseBook {
  authors: [String!]!
  covers: [[String!]!]!
  openLibraryId: String!
  subjects: [String!]!
  title: String!
}

type BaseBookIdentifiers {
  authors: [String!]!
  openLibraryId: String!
  title: String!
}

type BaseBookMongo {
  _id: GraphQLObjectId!
  authors: [String!]!
  covers: [[String!]!]!
  openLibraryId: String!
  subjects: [String!]!
  title: String!
}

type BaseBookMongoConnection {
  edges: [BaseBookMongoEdge!]
  pageInfo: BaseBookMongoPageInfo
}

type BaseBookMongoEdge {
  cursor: String
  node: BaseBookMongo
}

type BaseBookMongoPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Book {
  _id: GraphQLObjectId!
  authors: [String!]!
  covers: [[String!]!]!
  openLibraryId: String!
  owners: [ID!]!
  subjects: [String!]!
  timesAdded: Int!
  title: String!
}

type BookConnection {
  edges: [BookEdge!]
  pageInfo: BookPageInfo
}

type BookEdge {
  cursor: String
  node: Book
}

input BookFilter {
  author: String
  createdAfter: DateTime
  createdBefore: DateTime
  title: String
}

type BookPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type BookResponse {
  page: BookConnection!
  pageData: PageData
}

input CreateTaskHistoryInput {
  description: String!
  taskId: GraphQLObjectId!
  title: String!
}

input CreateTaskInput {
  bookId: GraphQLObjectId
  description: String!
  openLibraryBookId: String
  priority: TaskPriority
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""ObjectId custom scalar type"""
scalar GraphQLObjectId

type Mutation {
  addTaskHistory(input: CreateTaskHistoryInput!): TaskHistory!
  createTask(input: CreateTaskInput!): Task!
  deleteTask(taskId: GraphQLObjectId!): GraphQLObjectId!
  login(idToken: String!): String!
  updateTask(input: UpdateTaskInput!): Task!
  updateTaskHistory(input: UpdateTaskHistoryInput!): TaskHistory!
}

type PageData {
  count: Float!
  limit: Float!
  offset: Float!
}

type Query {
  getAllBooks(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Filter books stored in the system"""
    filter: BookFilter

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): BookResponse!
  getBooks(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Filter a user's books"""
    filter: UserTaskFilter

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): UserBooksResponse!
  getTask(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    taskId: GraphQLObjectId!
  ): TaskRelay!
  getTasks(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Filter a user's tasks"""
    filter: UserTaskFilter

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): UserTasksResponse!
  searchOnlineBooks(input: SearchBookInput!, limit: Float = 5, offset: Float = 0): [BaseBook!]!
}

input SearchBookInput {
  author: String
  subject: String
  title: String
}

type Task {
  _id: GraphQLObjectId!
  attachItem: BaseBookMongo!
  description: String!
  history: [TaskHistory!]!
  owner: GraphQLObjectId!
  priority: TaskPriority!
  status: TaskStatus!
  title: String!
}

type TaskHistory {
  _id: GraphQLObjectId!
  autoGenerated: Boolean!
  description: String!
  taskId: GraphQLObjectId!
  taskStatus: TaskStatus!
  title: String!
}

type TaskHistoryConnection {
  edges: [TaskHistoryEdge!]
  pageInfo: TaskHistoryPageInfo
}

type TaskHistoryEdge {
  cursor: String
  node: TaskHistory
}

type TaskHistoryPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type TaskHistoryResponse {
  page: TaskHistoryConnection!
  pageData: PageData
}

enum TaskPriority {
  CRITICAL
  HIGH
  LOW
  MEDIUM

  """The default status."""
  NONE
}

"""
A relay-style type for Task. The only difference is in the `history` field: [TaskHistory] -> TaskHistoryResponse.
"""
type TaskRelay {
  _id: GraphQLObjectId!
  attachItem: BaseBookMongo!
  description: String!
  history: TaskHistoryResponse!
  owner: GraphQLObjectId!
  priority: TaskPriority!
  status: TaskStatus!
  title: String!
}

enum TaskStatus {
  DONE
  IN_PROGRESS

  """The default status."""
  NEW
  POSTPONE
}

input UpdateTaskHistoryInput {
  description: String
  taskHistoryId: GraphQLObjectId!
  taskId: GraphQLObjectId!
  title: String
}

input UpdateTaskInput {
  bookId: GraphQLObjectId
  description: String
  openLibraryBookId: String
  priority: TaskPriority
  status: TaskStatus
  taskId: GraphQLObjectId!
  title: String
}

type UserBooksResponse {
  page: BaseBookMongoConnection!
  pageData: PageData
}

type UserTask {
  _id: GraphQLObjectId!
  attachItem: BaseBookIdentifiers!
  description: String!
  priority: TaskPriority!
  status: TaskStatus!
  title: String!
}

input UserTaskAttachItemFilter {
  openLibraryBookId: String
  title: String
}

type UserTaskConnection {
  edges: [UserTaskEdge!]
  pageInfo: UserTaskPageInfo
}

type UserTaskEdge {
  cursor: String
  node: UserTask
}

input UserTaskFilter {
  attachItem: UserTaskAttachItemFilter
  from: DateTime
  priority: TaskPriority
  status: TaskStatus
  to: DateTime
}

type UserTaskPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type UserTasksResponse {
  page: UserTaskConnection!
  pageData: PageData
}
